package fileWriter;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import java.util.Vector;

import processing.WordList;

import definitions.DictionaryEntry;
import definitions.ThesaurusEntry;
import dictionaries.DictionaryManager;


public class XMLWriter extends GenericFileWriter{

	/**
	 * Constructor - takes the absolute path of the output html
	 * file.
	 * 
	 * @param outputPath - absolute path of the output html file.
	 */
	public XMLWriter(String outputPath, WordList wl){
		super(outputPath, wl);
	}
	
	private String dictVectorToXml(Vector<DictionaryEntry> vect){
		if(vect == null){
			return "";
		}
		if(vect.size() == 0){
			return "";
		}
		
		String output = "\t\t<DictionaryEntry>\n";
		output+= "\t\t\t<word>" + vect.get(0).word + "</word>\n";
		output += "\t\t\t<quantity>" + vect.size() + "</quantity>\n";
		
		for(int i=0; i<vect.size(); i++){
			DictionaryEntry current = vect.get(i);
			
			output += "\t\t\t<entry>\n";
			
			if(current.meanings != null){
				for(int j=0; j< current.meanings.size(); j++){
					output += "\t\t\t\t<meaning>" + current.meanings.get(j) + "</meaning>\n";
				}
			}
			if(current.sentence != null){
				for(int j=0; j< current.sentence.size(); j++){
					output += "\t\t\t\t<sentence>" + current.meanings.get(j) + "</sentence>\n";
				}
			}
			if(current.synonym != null){
				current.synonym.trim();
				if(!(current.synonym.equals("") || current.synonym.equals("null"))){
					output += "\t\t\t\t<synonym>" + current.synonym + "</synonym>\n";
				}
			}
			output += "\t\t\t</entry>\n";
		}
		output += "\t\t</DictionaryEntry>\n";
		return output;
	}
	
	private String thesVectorToXml(Vector<ThesaurusEntry> vect){
			
		if(vect == null){
			return "";
		}
		if(vect.size() == 0){
			return "";
		}
		
		String output = "\t\t<ThesaurusEntry>\n";
		output+= "\t\t\t<word>" + vect.get(0).word + "</word>\n";
		output += "\t\t\t<quantity>" + vect.size() + "</quantity>\n";
		
		for(int i=0; i<vect.size(); i++){
			ThesaurusEntry current = vect.get(i);
			
			output += "\t\t\t<entry>\n";
			
			if(current.meaning != null){
				current.meaning.trim();
				if(!(current.meaning.equals("") || current.meaning.equals("null"))){
					output += "\t\t\t\t<meaning>" + current.meaning + "</meaning>\n";
				}
			}
			
			if(current.sentence != null){
				current.sentence.trim();
				if(!(current.sentence.equals("") || current.sentence.equals("null"))){
					output += "\t\t\t\t<sentence>" + current.sentence + "</sentence>\n";
				}
			}
			
			if(current.synonym != null){
				current.synonym.trim();
				if(!(current.synonym.equals("") || current.synonym.equals("null"))){
					output += "\t\t\t\t<synonym>" + current.synonym + "</synonym>\n";
				}
			}
			
			if(current.antonym != null){
				current.antonym.trim();
				if(!(current.antonym.equals("") || current.antonym.equals("null"))){
					output += "\t\t\t\t<antonym>" + current.antonym + "</antonym>\n";
				}
			}
			
			if(current.nearant != null){
				current.nearant.trim();
				if(!(current.nearant.equals("") || current.nearant.equals("null"))){
					output += "\t\t\t\t<nearant>" + current.nearant + "</nearant>\n";
				}
			}
			
			if(current.relword != null){
				current.relword.trim();
				if(!(current.relword.equals("") || current.relword.equals("null"))){
					output += "\t\t\t\t<relword>" + current.relword + "</relword>\n";
				}
			}
			
			output += "\t\t\t</entry>\n";
		}
		output += "\t\t</ThesaurusEntry>\n";
		return output;
	}
	
	/**
	 * This method takes a generic Vector that may contain either
	 * Thesaurus / Dictionary Entries and returning a string of
	 * html snippet format for that particular target word
	 * @param entry - Vector either containing thesaurus / Dictionary Entries
	 * @return - HTML format snippet string
	 */
	private String getXml(Vector entry){
		if(entry == null){
			return "";
		}else if(entry.size() == 0){
			return "";
		}
		Object o = entry.get(0);
		if(o.getClass().getSimpleName().equals("ThesaurusEntry")){
			return thesVectorToXml(entry);
		}else if(o.getClass().getSimpleName().equals("DictionaryEntry")){
			return dictVectorToXml(entry);
		}
		return "";
	}
	
	/**
	 * This is the main method which writes the data to the xml file
	 *
	 * @param entries - Vector array of thesaurus / dictionary entries
	 */
	public void write(Vector[] entries){
			
		File f = new File(filepath);
		
		String output = "";
		for(int i=0; i<entries.length; i++){
			output += getXml(entries[i]);
		}
		int indx = filepath.lastIndexOf("\\");
		String header = filepath.substring(indx+1);
		header = header.substring(0,header.length()-5);

		try {
			FileWriter fw = new FileWriter(f);
			String prev = "<root>\n\t<head>\n";
			prev += "\t\t<title>"+header+" - Generated By Suhas Somnath</title>\n";
			String website = DictionaryManager.getDictionary(this.wordlist.getSource()).getName();
			prev += "\t\t<thesaurus>" + website + "</thesaurus>\n";
			prev += "\t\t<version> " + wordlist.getVersion() + "</version>\n";
			Calendar cal = Calendar.getInstance();
			prev += "\t\t<Created>" + (cal.get(Calendar.MONTH)+1) + "/" + cal.get(Calendar.DAY_OF_MONTH) + "/" + cal.get(Calendar.YEAR);
			prev += "-" + cal.get(Calendar.HOUR) + ":" + cal.get(Calendar.MINUTE) + " " + cal.get(Calendar.AM_PM);
			prev += "\t</head>\n";
			prev += "\t<content>\n";
			String end = "\n\t</content>\n</root>";
			output = prev + output + end;
			fw.write(output);
			fw.close();
			
			signalCompleted();
			
			System.out.println("Please lookup written file: " + filepath);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
